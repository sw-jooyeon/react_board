package com.example.board.service;

import com.example.board.dto.*;
import com.example.board.entity.Board;
import com.example.board.repository.BoardRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.nio.file.*;

@Service
public class BoardService {

    @Autowired
    private BoardRepository boardRepository;

    private final Path fileStorageLocation;

    public BoardService() {
        this.fileStorageLocation = Paths.get("uploads").toAbsolutePath().normalize();
        try {
            Files.createDirectories(this.fileStorageLocation);
        } catch (IOException ex) {
            throw new RuntimeException("Could not create upload directory", ex);
        }
    }

    // 게시글 목록 (페이지당 20개)
    public Page<BoardSummaryDto> getBoards(int page) {
        Pageable pageable = PageRequest.of(page, 20, Sort.by("createdAt").descending());
        Page<Board> boards = boardRepository.findAll(pageable);
        return boards.map(board -> new BoardSummaryDto(
                board.getId(),
                board.getTitle(),
                board.getWriter(),
                board.getCreatedAt()
        ));
    }

    // 게시글 상세 조회
    public BoardDetailDto getBoardDetail(Long id) {
        Board board = boardRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Board not found"));
        return new BoardDetailDto(
                board.getId(),
                board.getTitle(),
                board.getContent(),
                board.getWriter(),
                board.getCreatedAt(),
                board.getUpdatedAt(),
                board.getFilePath()
        );
    }

    // 게시글 생성
    public BoardDetailDto createBoard(BoardCreateRequest request) {
        Board board = new Board();
        board.setTitle(request.getTitle());
        board.setContent(request.getContent());
        board.setWriter(request.getWriter());
        board.setPassword(request.getPassword());
        Board saved = boardRepository.save(board);
        return new BoardDetailDto(
                board.getId(),
                board.getTitle(),
                board.getContent(),
                board.getWriter(),
                board.getCreatedAt(),
                board.getUpdatedAt(),
                board.getFilePath()
        );
    }

    // 게시글 수정
    public BoardDetailDto updateBoard(Long id, BoardUpdateRequest request) {
        Board board = boardRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Board not found"));
        if (!board.getPassword().equals(request.getPassword())) {
            throw new RuntimeException("Password mismatch");
        }
        board.setTitle(request.getTitle());
        board.setContent(request.getContent());
        Board updated = boardRepository.save(board);
        return new BoardDetailDto(
                board.getId(),
                board.getTitle(),
                board.getContent(),
                board.getWriter(),
                board.getCreatedAt(),
                board.getUpdatedAt(),
                board.getFilePath()
        );
    }

    // 게시글 삭제
    public void deleteBoard(Long id, String password) {
        Board board = boardRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Board not found"));
        if (!board.getPassword().equals(password)) {
            throw new RuntimeException("Password mismatch");
        }
        boardRepository.delete(board);
    }

    // 패스워드 검증
    public void verifyPassword(Long id, String password) {
        Board board = boardRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Board not found"));
        if (!board.getPassword().equals(password)) {
            throw new RuntimeException("Password mismatch");
        }
    }

    // 파일 저장 메서드: MultipartFile을 로컬 storage에 저장하고 파일명을 반환
    public String storeFile(MultipartFile file) {
        String fileName = StringUtils.cleanPath(file.getOriginalFilename());
        try {
            Path targetLocation = this.fileStorageLocation.resolve(fileName);
            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);
            return fileName;
        } catch (IOException ex) {
            throw new RuntimeException("File storage failed", ex);
        }
    }

    // 파일 업로드 메서드: 게시글에 첨부파일을 저장하고 filePath 필드를 업데이트
    public void uploadFile(Long boardId, MultipartFile file) {
        Board board = boardRepository.findById(boardId)
                .orElseThrow(() -> new RuntimeException("Board not found"));
        String fileName = storeFile(file);
        board.setFilePath(fileName);
        boardRepository.save(board);
    }
}
