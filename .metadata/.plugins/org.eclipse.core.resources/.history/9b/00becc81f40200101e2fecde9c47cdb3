package com.example.board.service;

import com.example.board.entity.Board;
import com.example.board.repository.BoardRepository;
import com.example.board.dto.BoardSummaryDto;
import com.example.board.dto.BoardDetailDto;
import com.example.board.dto.BoardCreateRequest;
import com.example.board.dto.BoardUpdateRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;

@Service
public class BoardService {
    
    @Autowired
    private BoardRepository boardRepository;
    
    // 게시글 목록 (페이지당 20개)
    public Page<BoardSummaryDto> getBoards(int page) {
        Pageable pageable = PageRequest.of(page, 20, Sort.by("createdAt").descending());
        Page<Board> boards = boardRepository.findAll(pageable);
        return boards.map(board -> new BoardSummaryDto(
                board.getId(),
                board.getTitle(),
                board.getWriter(),
                board.getCreatedAt()
        ));
    }
    
    // 게시글 상세 조회
    public BoardDetailDto getBoardDetail(Long id) {
        Board board = boardRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Board not found"));
        return new BoardDetailDto(
                board.getId(),
                board.getTitle(),
                board.getContent(),
                board.getWriter(),
                board.getCreatedAt(),
                board.getUpdatedAt()
        );
    }
    
    // 게시글 생성
    public BoardDetailDto createBoard(BoardCreateRequest request) {
        Board board = new Board();
        board.setTitle(request.getTitle());
        board.setContent(request.getContent());
        board.setWriter(request.getWriter());
        board.setPassword(request.getPassword());
        Board saved = boardRepository.save(board);
        return new BoardDetailDto(
                saved.getId(),
                saved.getTitle(),
                saved.getContent(),
                saved.getWriter(),
                saved.getCreatedAt(),
                saved.getUpdatedAt()
        );
    }
    
    // 게시글 수정 (패스워드 검증 후 제목과 본문 수정 – 작성자, 패스워드는 변경 불가)
    public BoardDetailDto updateBoard(Long id, BoardUpdateRequest request) {
        Board board = boardRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Board not found"));
        if (!board.getPassword().equals(request.getPassword())) {
            throw new RuntimeException("Password mismatch");
        }
        board.setTitle(request.getTitle());
        board.setContent(request.getContent());
        Board updated = boardRepository.save(board);
        return new BoardDetailDto(
                updated.getId(),
                updated.getTitle(),
                updated.getContent(),
                updated.getWriter(),
                updated.getCreatedAt(),
                updated.getUpdatedAt()
        );
    }
    
    // 게시글 삭제 (패스워드 검증)
    public void deleteBoard(Long id, String password) {
        Board board = boardRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Board not found"));
        if (!board.getPassword().equals(password)) {
            throw new RuntimeException("Password mismatch");
        }
        boardRepository.delete(board);
    }
    
    // 패스워드 검증 (수정/삭제 전 별도 검증)
    public void verifyPassword(Long id, String password) {
        Board board = boardRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Board not found"));
        if (!board.getPassword().equals(password)) {
            throw new RuntimeException("Password mismatch");
        }
    }
}
