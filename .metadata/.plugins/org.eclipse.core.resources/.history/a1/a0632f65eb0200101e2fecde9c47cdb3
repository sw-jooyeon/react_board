package com.example.board.controller;

import com.example.board.dto.BoardCreateDTO;
import com.example.board.dto.BoardDTO;
import com.example.board.dto.BoardUpdateDTO;
import com.example.board.service.BoardService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.NoSuchElementException;

@RestController
@RequestMapping("/boards")
@CrossOrigin(origins = "*")
public class BoardController {

    @Autowired
    private BoardService boardService;

    // 1. 게시판 목록 조회 (페이징: 기본 20개씩)
    @GetMapping
    public ResponseEntity<Page<BoardDTO>> getBoards(@RequestParam(defaultValue = "0") int page,
                                                    @RequestParam(defaultValue = "20") int size) {
        return ResponseEntity.ok(boardService.getBoards(page, size));
    }

    // 2. 게시판 상세 조회
    @GetMapping("/{id}")
    public ResponseEntity<BoardDTO> getBoard(@PathVariable Long id) {
        try {
            return ResponseEntity.ok(boardService.getBoard(id));
        } catch (NoSuchElementException e) {
            return ResponseEntity.notFound().build();
        }
    }

    // 3. 게시물 생성
    @PostMapping
    public ResponseEntity<BoardDTO> createBoard(@RequestBody BoardCreateDTO createDTO) {
        BoardDTO boardDTO = boardService.createBoard(createDTO);
        return ResponseEntity.ok(boardDTO);
    }

    // 4. 패스워드 검증 (수정/삭제 전)
    @PostMapping("/{id}/validate")
    public ResponseEntity<?> validatePassword(@PathVariable Long id, @RequestBody Map<String, String> payload) {
        String password = payload.get("password");
        try {
            boolean valid = boardService.validatePassword(id, password);
            if(valid) {
                return ResponseEntity.ok().build();
            } else {
                return ResponseEntity.badRequest().body("Invalid password.");
            }
        } catch (NoSuchElementException e) {
            return ResponseEntity.notFound().build();
        }
    }

    // 5. 게시물 수정 (패스워드 검증 후 제목, 본문 수정)
    @PutMapping("/{id}")
    public ResponseEntity<?> updateBoard(@PathVariable Long id, @RequestBody BoardUpdateDTO updateDTO) {
        try {
            BoardDTO updated = boardService.updateBoard(id, updateDTO);
            return ResponseEntity.ok(updated);
        } catch (NoSuchElementException e) {
            return ResponseEntity.notFound().build();
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    // 6. 게시물 삭제 (패스워드 파라미터로 전달)
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteBoard(@PathVariable Long id, @RequestParam String password) {
        try {
            boardService.deleteBoard(id, password);
            return ResponseEntity.ok().build();
        } catch (NoSuchElementException e) {
            return ResponseEntity.notFound().build();
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }
}
