package com.example.board.service;

import com.example.board.dto.BoardCreateDTO;
import com.example.board.dto.BoardDTO;
import com.example.board.dto.BoardUpdateDTO;
import com.example.board.entity.Board;
import com.example.board.repository.BoardRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import java.util.NoSuchElementException;

@Service
public class BoardService {

    @Autowired
    private BoardRepository boardRepository;

    public Page<BoardDTO> getBoards(int page, int size) {
        return boardRepository.findAll(PageRequest.of(page, size))
                .map(BoardDTO::fromEntity);
    }

    public BoardDTO getBoard(Long id) {
        Board board = boardRepository.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Board not found with id: " + id));
        return BoardDTO.fromEntity(board);
    }

    public BoardDTO createBoard(BoardCreateDTO createDTO) {
        Board board = new Board();
        board.setTitle(createDTO.getTitle());
        board.setContent(createDTO.getContent());
        board.setWriter(createDTO.getWriter());
        board.setPassword(createDTO.getPassword());
        Board saved = boardRepository.save(board);
        return BoardDTO.fromEntity(saved);
    }

    public BoardDTO updateBoard(Long id, BoardUpdateDTO updateDTO) {
        Board board = boardRepository.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Board not found with id: " + id));

        // 패스워드 검증 (작성 시 입력한 비밀번호와 비교)
        if (!board.getPassword().equals(updateDTO.getPassword())) {
            throw new IllegalArgumentException("Invalid password.");
        }
        // 제목과 본문만 수정 가능 (작성자, 패스워드는 변경 불가)
        board.setTitle(updateDTO.getTitle());
        board.setContent(updateDTO.getContent());
        Board saved = boardRepository.save(board);
        return BoardDTO.fromEntity(saved);
    }

    public void deleteBoard(Long id, String password) {
        Board board = boardRepository.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Board not found with id: " + id));
        if (!board.getPassword().equals(password)) {
            throw new IllegalArgumentException("Invalid password.");
        }
        boardRepository.delete(board);
    }
    
    // 별도 패스워드 검증 메서드 (수정/삭제 전 호출)
    public boolean validatePassword(Long id, String password) {
        Board board = boardRepository.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Board not found with id: " + id));
        return board.getPassword().equals(password);
    }
}
